# config.yaml

# Where to save the log file and the output models/checkpoints
log_file:  /home/users/zkanit/proto_utils/save_dir/xlmr_models/out.log
save_model:  onmt_v2 

#Training info
exp: onmt_v2-deprel
seed: 123456789

## Where the samples will be written, saved as <save_model>_N.pt
save_data: /home/users/zkanit/proto_utils/save_dir/xlmr_models

# Training files
data:
    corpus_1:
        path_src: /home/users/zkanit/proto_utils/datasets/ud-treebanks-v2.10-trainable/UD_English-EWT/en_ewt-ud-train.txt
        path_tgt: /home/users/zkanit/proto_utils/datasets/ud-treebanks-v2.10-trainable/UD_English-EWT/en_ewt-ud-train.conllu
    valid:
        path_src: /home/users/zkanit/proto_utils/datasets/ud-treebanks-v2.10-trainable/UD_English-EWT/en_ewt-ud-dev.txt
        path_tgt: /home/users/zkanit/proto_utils/datasets/ud-treebanks-v2.10-trainable/UD_English-EWT/en_ewt-ud-dev.conllu

# Build vocab info
#n_sample: -1 # build vocab on all file


# Vocabulary files, generated by onmt_build_vocab
src_vocab: /home/users/zkanit/proto_utils/datasets/ud-treebanks-v2.10-trainable/UD_English-EWT/en_ewt-ud-train.txt.vocab
tgt_vocab: /home/users/zkanit/proto_utils/datasets/ud-treebanks-v2.10-trainable/UD_English-EWT/en_ewt-ud-train.conllu.vocab

# Vocabulary size - should be the same as in sentence piece
src_vocab_size: 50000
tgt_vocab_size: 50000

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 150
src_seq_length: 150

# Embeddings option
#src_embeddings: /home/users/zkanit/proto_utils/save_dir/HG/nllb_tok.pt

# Tokenization options
src_subword_model: /home/users/zkanit/proto_utils/save_dir/HG/nllb_tok.pt
#tgt_subword_model: /home/users/zkanit/proto_utils/save_dir/HG/nllb_tok.pt


# Stop training if it does not improve after n validations
early_stopping: 10

# Default: 5000 - Save a model checkpoint for each n
save_checkpoint_steps: 1000

# To save space, limit checkpoints to last n
# keep_checkpoint: 3


# Default: 100000 - Train the model to max n steps 
# Increase to 200000 or more for large datasets
# For fine-tuning, add up the required steps to the original steps
train_steps: 100000

# Default: 10000 - Run validation after n steps
valid_steps: 1000

# Default: 4000 - for large datasets, try up to 8000
report_every: 100

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]

# Batching
bucket_size: 262144
num_workers: 0  # Default: 2, set to 0 when RAM out of memory
batch_type: "sents"
batch_size: 16   # Tokens per batch, change when CUDA out of memory
valid_batch_size: 16
max_generator_batches: 2
accum_count: [4]
accum_steps: [0]

# Optimization
model_dtype: "fp16"
optim: "adam" # ajouter plus tard adamw
learning_rate: 0.0001
warmup_steps: 8000
decay_method: "noam"
adam_beta2: 0.998
max_grad_norm: 0
label_smoothing: 0.1
# param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model
model_type: text # text => embeddings / seq2seq => pas d'embeddings
encoder_type: xlmr
freeze_encoder: true # not sure
decoder_type: xlmr-adapted
position_encoding: true
# add src_embeddings ?
dropout_steps: [0]
dropout: 0.3
attention_dropout: 0.1

#Â arguments added
task: posdep
embedding_name: xlm-roberta-base
treebank_name: english